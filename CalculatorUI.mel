proc float Addition(float $input[]){
    float $total = 0;
    for($i = 0; $i < size($input); $i++)
    {
        $total += $input[$i];
    }
    return $total;
}

proc float Subtraction(float $input[])
{
    float $total = $input[0];
    for($i = 1; $i < size($input); $i++)
    {
        $total -= $input[$i];
    }
    return $total;
}

proc float Multiplication(float $input[])
{
    float $total = $input[0];
    for($i = 1; $i < size($input); $i++)
    {
        $total *= $input[$i];
    }
    return $total;
}

proc float Division(float $input[])
{
    float $total = $input[0];
    for($i = 1; $i < size($input); $i++)
    {
        $total /= $input[$i];
    }
    return $total;
}

proc float Power(float $base, float $exponent) 
{
    return `pow $base $exponent`;
}

proc float Mean(float $input[])
{
    float $total = 0;
    for($i = 0; $i < size($input); $i++)
    {
        $total += $input[$i];
    }
    $total /= size($input);
    return $total;
}

proc float Median(float $input[]) 
{
    float $sorted[] = `sort $input`;
    float $total = 0;
    if (size($sorted) % 2 == 0) {
        int $even_number_one = size($sorted) / 2;
        int $even_number_two = $even_number_one - 1;
        $total = ($sorted[$even_number_one] + $sorted[$even_number_two]) / 2.0;
    } else {
        int $odd_number = size($sorted) / 2;
        $total = $sorted[$odd_number];
    }
    return $total;
}

// Main Calculator Function
global proc float Calculator(string $operation, float $input[])
{
    float $result = 0;

    if($operation == "Addition"){
        $result = Addition($input);
    } else if ($operation == "Subtraction") {
        $result = Subtraction($input);
    } else if ($operation == "Multiplication") {
        $result = Multiplication($input);
    } else if ($operation == "Division") {
        $result = Division($input);
    } else if ($operation == "Power") {
        $result = Power($input[0], $input[1]);
    } else if ($operation == "Mean") {
        $result = Mean($input);
    } else if ($operation == "Median") {
        $result = Median($input);
    } else {
        error "Unknown operation!";
    }
    return $result;
}

// UI Creation Function
global proc createCalculatorUI()
{
    if (`window -exists calcWindow`) {
        deleteUI calcWindow;
    }

    window -title "Calculator" -widthHeight 300 200 calcWindow;
    columnLayout;

    // Input Fields for Numbers
    text -label "Enter numbers (comma separated):";
    string $numInputField = `textField`;

    // Dropdown for Operation Selection
    text -label "Select Operation:";
    string $operationMenu = `optionMenu`;
    menuItem -label "Addition";
    menuItem -label "Subtraction";
    menuItem -label "Multiplication";
    menuItem -label "Division";
    menuItem -label "Power";
    menuItem -label "Mean";
    menuItem -label "Median";

    // Result Display Field
    text -label "Result:";
    string $resultField = `textField -editable false`;

    // Button to Calculate
    button -label "Calculate" -command ("runCalculator(\"" + $numInputField + "\", \"" + $operationMenu + "\", \"" + $resultField + "\")");

    showWindow calcWindow;
}

global proc runCalculator(string $numInputField, string $operationMenu, string $resultField)
{
    // Query the values from the UI controls
    string $numStr = `textField -q -text $numInputField`;
    string $operation = `optionMenu -q -value $operationMenu`;

    // Variable to hold the tokenized values
    string $numArray[];

    // Tokenize the input string based on commas
    tokenize($numStr, ",", $numArray);

    // Convert the string array to a float array
    float $input[] = {};  // Initialize the float array
    for ($i = 0; $i < size($numArray); $i++) {
        $input[$i] = float($numArray[$i]); 
    }

    // Perform the calculation
    float $result = Calculator($operation, $input);

    // Display the result in the result field
    textField -edit -text (string($result)) $resultField;
}

// Example call to create the UI
createCalculatorUI();

